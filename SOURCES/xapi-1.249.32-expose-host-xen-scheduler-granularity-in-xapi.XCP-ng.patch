This patch adds 2 new methods to the `Host` object:
  `set_sched_gran`: sets Xen's scheduler granularity (either `core`, `cpu` or `socket`)
  `get_sched_gran`: gets Xen's scheduler granularity

It uses `/opt/xensource/libexec/xen-cmdline`

New entry in `/etc/xapi.conf` to allow the feature: `allow-host-sched-gran-modification: true`

diff --git a/ocaml/idl/datamodel_host.ml b/ocaml/idl/datamodel_host.ml
index 3676cda33..68b52c7be 100644
--- a/ocaml/idl/datamodel_host.ml
+++ b/ocaml/idl/datamodel_host.ml
@@ -1382,6 +1382,34 @@ let set_https_only =
     ~allowed_roles:_R_POOL_OP ()
 
 
+  let host_sched_gran = Enum("host_sched_gran", [
+    "core", "core scheduling";
+    "cpu", "CPU scheduling";
+    "socket", "socket scheduling";
+  ])
+
+  let set_sched_gran = call
+    ~name:"set_sched_gran"
+    ~lifecycle:[Prototyped, rel_next, ""]
+    ~doc:"Sets xen's sched-gran on a host. See: https://xenbits.xen.org/docs/unstable/misc/xen-command-line.html#sched-gran-x86"
+    ~params:[
+      Ref _host, "self", "The host";
+      host_sched_gran, "value", "The sched-gran to apply to a host"
+    ]
+    ~allowed_roles:_R_LOCAL_ROOT_ONLY
+    ()
+
+  let get_sched_gran = call
+    ~name:"get_sched_gran"
+    ~lifecycle:[Prototyped, rel_next, ""]
+    ~doc:"Gets xen's sched-gran on a host"
+    ~params:[
+      Ref _host, "self", "The host";
+    ]
+     ~allowed_roles:_R_LOCAL_ROOT_ONLY
+    ~result:(host_sched_gran, "The host's sched-gran")
+    ()
+
   (** Hosts *)
   let t =
     create_obj ~in_db:true ~in_product_since:rel_rio ~in_oss_since:oss_since_303 ~internal_deprecated_since:None ~persist:PersistEverything ~gen_constructor_destructor:false ~name:_host ~descr:"A physical host" ~gen_events:true
@@ -1504,6 +1532,8 @@ let set_https_only =
         notify_send_new_pool_secret;
         cleanup_pool_secret;
         set_https_only;
+        set_sched_gran;
+        get_sched_gran;
       ]
       ~contents:
         ([ uid _host;
diff --git a/ocaml/xapi-cli-server/record_util.ml b/ocaml/xapi-cli-server/record_util.ml
index 3da43fc76..9197f46d6 100644
--- a/ocaml/xapi-cli-server/record_util.ml
+++ b/ocaml/xapi-cli-server/record_util.ml
@@ -599,6 +599,25 @@ let host_display_to_string h =
   | `disable_on_reboot ->
       "disable_on_reboot"
 
+let host_sched_gran_of_string s =
+  match String.lowercase_ascii s with
+  | "core" ->
+      `core
+  | "cpu" ->
+      `cpu
+  | "socket" ->
+      `socket
+  | _ ->
+      raise (Record_failure ("Expected 'core','cpu', 'socket', got " ^ s))
+
+let host_sched_gran_to_string = function
+  | `core ->
+      "core"
+  | `cpu ->
+      "cpu"
+  | `socket ->
+      "socket"
+
 let pgpu_dom0_access_to_string x = host_display_to_string x
 
 let string_to_vdi_onboot s =
diff --git a/ocaml/xapi/message_forwarding.ml b/ocaml/xapi/message_forwarding.ml
index c2d334f71..4f2f5de76 100644
--- a/ocaml/xapi/message_forwarding.ml
+++ b/ocaml/xapi/message_forwarding.ml
@@ -3679,6 +3679,21 @@ functor
         do_op_on ~local_fn ~__context ~host:self (fun session_id rpc ->
             Client.Host.set_https_only ~rpc ~session_id ~self ~value
         )
+
+      let set_sched_gran ~__context ~self ~value =
+        info "Host.set_sched_gran: host='%s' sched='%s'"
+          (host_uuid ~__context self)
+          (Record_util.host_sched_gran_to_string value) ;
+        let local_fn = Local.Host.set_sched_gran ~self ~value in
+        do_op_on ~local_fn ~__context ~host:self (fun session_id rpc ->
+          Client.Host.set_sched_gran rpc session_id self value)
+
+      let get_sched_gran ~__context ~self =
+        info "Host.get_sched_gran: host='%s'" (host_uuid ~__context self) ;
+            let local_fn = Local.Host.get_sched_gran ~self in
+            do_op_on ~local_fn ~__context ~host:self (fun session_id rpc ->
+            Client.Host.get_sched_gran rpc session_id self)
+
     end
 
     module Host_crashdump = struct
diff --git a/ocaml/xapi/xapi_globs.ml b/ocaml/xapi/xapi_globs.ml
index 588a612f0..e3db67fe4 100644
--- a/ocaml/xapi/xapi_globs.ml
+++ b/ocaml/xapi/xapi_globs.ml
@@ -253,6 +253,8 @@ let tools_sr_pbd_device_config =
 
 let create_tools_sr = ref false
 
+let allow_host_sched_gran_modification = ref false
+
 let default_template_key = "default_template"
 
 let base_template_name_key = "base_template_name"
@@ -1251,6 +1253,10 @@ let other_options =
     , (fun () -> !extauth_ad_backend)
     , "Which AD backend used to talk to DC"
     )
+  ; ( "allow-host-sched-gran-modification"
+    , Arg.Set allow_host_sched_gran_modification
+    , (fun () -> string_of_bool !allow_host_sched_gran_modification)
+    , "Allows to modify the host's scheduler granularity" )
   ]
 
 let all_options = options_of_xapi_globs_spec @ other_options
diff --git a/ocaml/xapi/xapi_host.ml b/ocaml/xapi/xapi_host.ml
index 1c6848015..160db2d09 100644
--- a/ocaml/xapi/xapi_host.ml
+++ b/ocaml/xapi/xapi_host.ml
@@ -2554,3 +2554,42 @@ let set_https_only ~__context ~self ~value =
   | true ->
       (* it is illegal changing the firewall/https config in CC/FIPS mode *)
       raise (Api_errors.Server_error (Api_errors.illegal_in_fips_mode, []))
+
+let set_sched_gran ~__context ~self ~value =
+  if Helpers.get_localhost ~__context <> self then
+    failwith "Forwarded to the wrong host" ;
+  if not !Xapi_globs.allow_host_sched_gran_modification then
+    raise
+      Api_errors.(
+        Server_error (operation_not_allowed, ["Disabled by xapi.conf"])) ;
+  let arg =
+    Printf.sprintf "sched-gran=%s" (Record_util.host_sched_gran_to_string value)
+  in
+  let args = ["--set-xen"; arg] in
+  try
+    let _ = Helpers.call_script !Xapi_globs.xen_cmdline_script args in
+    ()
+  with e ->
+    error "Failed to update sched-gran: %s" (Printexc.to_string e) ;
+    raise
+      Api_errors.(
+        Server_error (internal_error, ["Failed to update sched-gran"]))
+
+let get_sched_gran ~__context ~self =
+  if Helpers.get_localhost ~__context <> self then
+    failwith "Forwarded to the wrong host" ;
+  let args = ["--get-xen"; "sched-gran"] in
+  try
+    let ret =
+      String.trim (Helpers.call_script !Xapi_globs.xen_cmdline_script args)
+    in
+    match ret with
+    | "" ->
+        `cpu (* If no entry then default value: cpu *)
+    | _ ->
+        let value = List.nth (String.split_on_char '=' ret) 1 in
+        Record_util.host_sched_gran_of_string value
+  with e ->
+    error "Failed to get sched-gran: %s" (Printexc.to_string e) ;
+    raise
+      Api_errors.(Server_error (internal_error, ["Failed to get sched-gran"]))
diff --git a/ocaml/xapi/xapi_host.mli b/ocaml/xapi/xapi_host.mli
index ffa7e4753..818f2d726 100644
--- a/ocaml/xapi/xapi_host.mli
+++ b/ocaml/xapi/xapi_host.mli
@@ -502,3 +502,9 @@ val cleanup_pool_secret :
 
 val set_https_only :
   __context:Context.t -> self:API.ref_host -> value:bool -> unit
+
+val set_sched_gran :
+  __context:Context.t -> self:API.ref_host -> value:API.host_sched_gran -> unit
+
+val get_sched_gran :
+  __context:Context.t -> self:API.ref_host -> API.host_sched_gran
-- 
2.40.1

